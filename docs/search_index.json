[["metodologia.html", "Capítulo 2 Metodologia 2.1 Definição do problema 2.2 Dados 2.3 Simulações", " Capítulo 2 Metodologia 2.1 Definição do problema Nesta seção buscamos definir o problema trabalhado de forma precisa. Primeiro, definimos o tipo de problema. O problema que estamos trabalhando é um aprendizado fracamente supervisionado, que é uma generalização do aprendizado supervisionado e também do aprendizado semi-supervisionado. Precisamos, então, nos aprofundar na classe de problemas que estamos trabalhando. Usualmente, a área de aprendizado estatístico (ou aprendizado de máquinas) se concentra em dois tipos de problemas principais: o aprendizado supervisionado e o aprendizado não supervisionado. É possível observar essa classificação em diversos livros-texto da área (XXX). Isso ocorre principalmente por fins didáticos, pois é mais fácil passar os modelos que fazem parte de cada área. No entanto, a estatística envolve com os problemas que ocorrem no mundo. E, no mundo, os problemas nem sempre recaem em uma ou outra categoria. O que temos, na verdade, é que os problemas não supervisionados e supervisionados estão conectados, desde que o objetivo seja o de predizer valores (regressão) ou categorias (classificação). Nesse sentido, uma área que ficou popular nos últimos anos, até por conta dos avanços na área de Deep Learning, é o aprendizado semi-supervisionado. Trata-se de uma classe de problemas em que temos uma amostra completamente anotada e uma amostra sem anotações. A amostra sem anotações é usada para compreender como os dados foram gerados, e os parâmetros podem ser compartilhados com a parte supervisionada do modelo. Isso poderia indicar que existem três classes de problemas: o não supervisionado, o supervisionado e o semi-supervisionado. Mas isso também não representa todas as classes de problemas. Em muitas aplicações reais, obter uma anotação completa e correta pode ser custoso ou até impraticável. Além disso por envolver trabalho humano, é comum que classificações contenham erros. Por isso, existe uma área, que generaliza todas as anteriores, que é o aprendizado fracamente supervisionado. Para poder tratar de todos os tópicos, primeiro definimos um problema fortemente supervisionado, depois fracamente supervisionado. Em seguida, passamos para a definição de Captchas e oráculos, mostrando como o problema do Captcha com o uso do oráculo pode ser visto como um problema fracamente supervisionado. Por último, apresentamos as definições de redes neurais e redes neurais convolucionais. A divisão foi feita nessa ordem para que todas as terminologias estivessem disponíveis no momento de apresentar cada definição. 2.1.1 Captcha Captcha é uma imagem \\(\\mathbf x = \\{x_{nmr} \\in [0,1]\\}_{N\\times M \\times R}\\), contendo padrões que podem ser reconhecidos por humanos. O do Captcha é dado por \\(\\mathbf y\\), um vetor de índices \\(\\mathbf y\\), em que cada índice \\(y_j\\) corresponde a um caractere \\(c_j\\), \\(j = 1, \\dots, L\\). O do Captcha é dado pela letra \\(L\\), com \\(L \\in \\mathbb{Z}_+\\). O problema pode ser detalhado em três itens, listados abaixo: . Vamos usar como exemplo o Captcha do Tribunal de Justiça de Minas Gerais (TJMG). Nesse caso, temos \\(L=4\\) e \\(|\\mathcal A|=10\\), apenas os dez algarismos arábicos. Um problema de resolver o Captcha diretamente é que a variável resposta \\(\\mathbf y\\) tem um número exponencial de combinações. Na formulação apresentada, a resposta é uma palavra de \\(L\\) caracteres, sendo que cada caractere \\(c_j\\) pode ter \\(|\\mathcal A|\\) valores. Nessa construção, o total de combinações é \\(|\\mathcal A|^L\\). Por exemplo, um Captcha com \\(L=6\\) letras e \\(|\\mathcal A| = 36\\) possibilidades em cada letra (26 letras do alfabeto latino e 10 algarismos arábicos), possui um total de 2.176.782.336 (\\(&gt;\\) 2 bilhões) combinações. Modelar essas imagens diretamente através de uma única variável resposta categórica é inviável. Uma forma alternativa de definir a variável resposta é tratando-a como uma . A resposta é multivariada porque temos \\(L\\) caracteres na imagem e multinomial porque temos \\(|\\mathcal A|\\) possíveis caracteres em cada posição. Dessa forma, podemos pensar que o modelo que resolve o Captcha envolve \\(L\\) classificadores com resposta multinomial, cada um dando conta de uma das posições dos índices. Os classificadores podem ser independentes e contar com etapas de pré-processamento separadas. Como o alfabeto de um Captcha é fixo, podemos representar o rótulo com um matriz de valores . Essa matriz terá \\(L\\) linhas e \\(|A|\\) colunas. Em cada linha, a matriz terá exatamente um valor \\(1\\) na posição correspondente ao caractere da resposta e o valor \\(0\\) em todas as outras posições. Por exemplo, podemos representar da seguinte forma: \\[ \\mathbf{y} = \\left[\\begin{array}{c} 3 \\\\ 4 \\\\ 9 \\\\ 1 \\end{array}\\right] \\rightarrow \\left[\\begin{array}{cccccccccc} 0 &amp; 0 &amp; 0 &amp; 1 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 \\\\ 0 &amp; 0 &amp; 0 &amp; 0 &amp; 1 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 \\\\ 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 1 \\\\ 0 &amp; 1 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 &amp; 0 \\end{array}\\right] \\] A forma da resposta será bastante utilizada, pois facilita o trabalho na parte computacional. Como será visto mais adiante, o modelo de rede neural gerará uma matriz de probabilidades que somam \\(1\\) em cada linha, com as probabilidades de cada caractere em cada posição. 2.1.1.1 Fatos estilizados Captchas costumam ter dimensões pequenas, com a altura \\(N\\) variando entre 30 e 200 e a largura \\(M\\) variando entre 100 e 300 . As imagens costumam ser retangulares para comportar várias letras, ou seja, geralmente \\(M &gt; N\\). O valor de \\(R\\) é 1 para imagens em escala de cinza e 3 para imagens coloridas. Historicamente, uma alternativa para resolver Captchas é separando o problema em duas tarefas: segmentar e classificar. A tarefa de segmentação consiste em receber uma imagem com várias letras e detectar pontos de corte, separando-a em várias imagens de uma letra. Já a classificação consiste em receber uma imagem com uma letra e identificar o caractere correspondente. Nesse caso, a resposta é reduzida para \\(|\\mathcal A|\\) categorias, que cresce linearmente e, portanto, tratável. A tarefa de resolver Captchas também poderia ser vista como um problema de reconhecimento óptico de caracteres (, OCR). No entanto, as distorções encontradas em Captchas são bem diferentes das distorções encontradas em textos escaneados, que são o objeto de aplicação de ferramentas de OCR. Por esse motivo, as ferramentas usuais de OCR apresentam resultados pouco satisfatórios em vários Captchas. As distorções encontradas em Captchas podem ser agrupadas em distorções para dificultar a segmentação e distorções para dificultar a classificação. Na parte de classificação, as principais formas de dificultar o trabalho dos modelos são i) mudar as fontes (serifa ou sem serifa ou negrito/itálico, por exemplo), ii) mudar letras minúsculas para maiúsculas e iii) adicionar distorções nos caracteres. Já na parte de segmentação, as principais formas são i) colar os caracteres e ii) adicionar linhas ligando os dígitos. Essas técnicas são combinadas com a adição de ruído e distorção nas imagens completas para compor a imagem final. 2.1.1.2 Exemplos Vamos usar como exemplo o CAPTCHA do Tribunal de Justiça de Minas Gerais (TJMG). Nesse caso, temos \\(L=4\\) e \\(|\\mathcal A|=10\\), apenas os dez algarismos. A Figura ?? mostra um exemplo do captcha do TJMG. Podemos notar a utilização de distorção de catacteres e adição de linhas ligando os dígitos como formas de evitar a resolução automática. Nesse caso, podemos resolver o problema da segmentação realizando cortes fixos na imagem. Podemos também limitar os eixos x, tirando os espaços vazios à esquerda e à direita e y, removendo espaços superiores e inferiores. Por último, transformamos a imagem em escala de cinza. O resultado dessas operações de pré-processamento estão na Figura ??. O resultado são cinco imagens de dimensões 26x20, associadas a cada caractere. O próximo passo é transformar o banco de dados num formato tratável por modelos tradicionais de regressão. Para isso, colocamos cada pixel em uma coluna da nossa base de dados. No caso do TJMG, cada CAPTCHA gera uma tabela de 5 linhas e 520 (26 * 20) colunas. A Tabela ?? mostra as primeiras seis colunas dessa base. Agora basta rodar o mesmo para toda a base de treino e rodar um modelo. Nesse exemplo, utilizamos uma base de 1500 CAPTCHAs classificados. O resultado após o pré-processamento é uma base com 7500 linhas e 520 colunas. Escolhemos manter 6000 linhas para treino e as 1500 restantes para teste. Utilizamos um modelo de florestas aleatórias para o exemplo (breiman2001random?). O resultado do modelo pode ser verificado na Tabela ??, que mostra os observados versus preditos na base de teste. O acerto foi de 99.6% em cada caractere. Assumindo que o erro não depende da posição do caractere no CAPTCHA, o acerto para a imagem completa é de aproximadamente 98%. O resultado para o TJMG é bastante satisfatório, mas não generaliza para outros CAPTCHAs. Tome por exemplo o CAPTCHA da Receita Federal (RFB) da Figura ??. Nesse caso, a posição dos caracteres muda significativamente de imagem para imagem, e assim fica difícil cortar em pedaços. A mesma técnica aplicada ao CAPTCHA RFB apresentou acerto de 78.8% do caractere, o que equivale a apenas 23.8% de acerto para toda a imagem. Claro que seria possível melhorar o poder preditivo com ajustes nos hipeparâmetros do modelo, mas o problema essencial nesse caso está na qualidade segmentação, e não na classificação dos caracteres. Outro problema dessa técnica é que ela é incapaz de trabalhar com CAPTCHAs de comprimento variável. Nesse caso, seria necessário construir um modelo não supervisionado para identificar a posição das letras, o que adiciona um grau a mais de complexidade na resolução do CAPTCHA. Por isso, faz-se necessária uma abordagem que trabalha com problema completo, sem passar explicitamente pela fase de segmentação. Ao invés de cortar a imagem, vamos extrair detalhes da imagem completa automaticamente e utilizar essas características como variáveis preditoras num modelo de regressão. Chamaremos essa abordagem de força bruta. 2.1.1.3 Oráculo Para definir oráculo tecnicamente, vamos utilizar a terminologia de aprendizado fracamente supervisionado definida anteriormente. Seja \\(g \\in \\mathcal Y ^ {\\mathcal X}\\) um modelo utilizado para predizer o Captcha e seja \\(X_{n+1}\\) um Captcha que é observado, com seu rótulo \\(y_{n+1}\\), desconhecido. O oráculo é uma função \\(\\mathcal O: \\mathcal Y \\rightarrow 2^{\\mathcal Y}\\), com \\[ \\mathcal O(g(X_{n+1})) = \\left\\{\\begin{array}{ll} \\{y_{n+1}\\}, &amp; \\text{ se } y_{n+1} = g(X_{n+1}) \\\\ \\mathcal Y \\setminus \\{g(X_{n+1})\\}, &amp; \\text{ se } y_{n+1} \\neq g(X_{n+1}) \\end{array}\\right. \\] Explicando a função: quando a função \\(g\\) acerta o rótulo, o oráculo retorna o próprio rótulo. Quando a função erra o rótulo, o oráculo retorna uma lista com todos os outros possíveis rótulos para \\(X_{n+1}\\), incluindo o valor correto \\(y_{n+1}\\).. É possível generalizar naturalmente o oráculo para múltiplos chutes mudando a definição da função preditiva. Seja \\(h:\\mathcal X \\longrightarrow \\mathcal Y ^ k\\) uma função que retorna um conjunto dos \\(k\\) rótulos mais prováveis, \\(k\\in \\mathbb N\\), \\(k\\geq 1\\), com \\(X_{n+1}\\) e \\(y_{n+1}\\) como definidos anteriormente. Então o oráculo é uma função \\(\\mathcal O: \\mathcal Y^k \\rightarrow 2^{\\mathcal Y}\\), com \\[ \\mathcal O(h(X_{n+1})) = \\left\\{\\begin{array}{ll} \\{y_{n+1}\\}, &amp; \\text{ se } y_{n+1} \\in h(X_{n+1}) \\\\ \\mathcal Y \\setminus h(X_{n+1}), &amp; \\text{ se } y_{n+1} \\notin h(X_{n+1}) \\end{array}\\right.. \\] Exemplo. 2.1.2 Aprendizado estatístico 2.1.2.1 Aprendizado supervisionado As definições seguem a mesma terminologia de Cabannes (XXX). Nosso objetivo é obter uma função \\(f \\in \\mathcal{Y}^\\mathcal{X}\\) entre um espaço de entrada \\(\\mathcal X\\) e um espaço de saída \\(\\mathcal{Y}\\). Definimos também a função de distribuição conjunta \\(\\rho \\in \\Delta_{\\mathcal X \\times \\mathcal Y}\\) sobre \\(\\mathcal X \\times \\mathcal Y\\). Essa função nem sempre é apresentada em outros contextos, mas será útil para estudar os modelos fracamente supervisionados. Finalmente, definimos uma função de perda \\(\\ell \\in \\mathbb R^{\\mathcal Y \\times \\mathcal Y}\\), que minimiza o risco \\[ \\mathcal R(f;\\rho) = \\mathbb E_{(X,Y)\\sim\\rho}[\\ell(f(X),Y)] \\] Ou seja, o risco é a o risco geral, definido como o valor esperado da função de perda sob \\(\\rho\\) para os valores possíveis de \\(X\\) e \\(Y\\). 2.1.2.2 Aprendizado fracamente supervisionado O aprendizado fracamente supervisionado pode ser dividido em três tipos principais. A supervisão com erros, a supervisão com rótulos incompletos e a supervisão de grupos de observações. O caso do Captcha pode ser entendido como aprendizado fracamente supervisionado com rótulos incompletos, já que uma parte da base pode ser anotada (supomos que sem erros) e uma parte da base é a resposta do oráculo indicando uma lista de rótulos possíveis que incluem o correto. Formalmente, o aprendizado fracamente supervisionado é definido como uma generalização do aprendizado totalmente supervisionado, como mostrado em seguida. 2.1.3 Redes neurais A abordagem discutida ao longo da tese utiliza redes neurais convolucionais. Para explicar o funcionamento dessa técnica, vamos primeiro apresentar definições para redes neurais e para a operação de convolução. Em seguida, vamos juntar os dois conceitos para construir o modelo utilizado nos Captchas. Uma rede neural pode ser entendida como uma extensão de modelos lineares generalizados com a adição de uma arquitetura aos componentes do modelo. Para mostrar esse conceito, vamos partir da definição de um modelo regressão logística até construir uma rede neural com camadas ocultas. 2.1.3.1 Regressão logística O modelo linear generalizado é composto por três elementos: componente aleatório, componente sistemático e função de ligação. O componente aleatório é uma variável aleatória com distribuição pertencente à família exponencial, que dá origem à verossimilhança do modelo. O componente sistemático é uma combinação linear das variáveis preditoras com um vetor de parâmetros. A função de ligação é uma operação que leva a componente sistemática no valor esperado da componente aleatória. Uma forma comum de definir a ligação é propondo uma função com domínio nos números reais e contradomínio igual ao suporte do componente aleatório. Dessa forma, não é necessário impor restrições aos parâmetros da componente sistemática para que os valores ajustados variem na mesma faixa que o componente aleatório. No exemplo da regressão logística, o componente aleatório tem distribuição Bernoulli com média \\(\\mu\\). O componente sistemático é a combinação linear \\(\\mathbf X \\boldsymbol \\beta\\) e a função de ligação é a inversa de \\[ g(\\mu) = \\log\\left(\\frac{\\mu}{1-\\mu}\\right) \\] A partir de uma amostra \\(y_1, \\dots, y_n\\) e observando que \\(\\mu_i = g^{-1}(\\mathbf X_i\\boldsymbol\\beta)\\), a verossimilhança do modelo é dada por \\[ \\mathcal L(\\boldsymbol \\beta|\\mathbf y) = \\prod_{i=1}^n f(y_i|\\boldsymbol\\beta) = \\prod_{i=1}^n\\mu_i^{y_i}(1-\\mu_i)^{1-y_i} \\] A log-verossimilhança é dada por \\[ l(\\boldsymbol \\beta|\\mathbf y) = \\sum_{i=1}^n y_i\\log(\\mu_i) + (1-y_i)\\log(1-\\mu_i) \\] Uma forma útil de olhar para a verossimilhança é a partir da , dada por \\[ D(\\mathbf y|\\boldsymbol \\beta) = l(\\mathbf y|\\mathbf y) - l(\\boldsymbol \\beta|\\mathbf y), \\] onde \\(l(\\mathbf y|\\mathbf y)\\) é a verossimilhança do modelo saturado, ou seja, calculada com \\(\\mathbf y\\) no lugar de \\(\\boldsymbol \\mu\\). A partir de um modelo ajustado, a função desvio pode ser interpretada como a distância entre a verossimilhança do modelo ajustado e a verossimilhança do modelo com um parâmetro para cada observação. Uma propriedade interessante da função desvio é que ela equivale à divergência de Kullback-Leibler. Por exemplo, para duas variáveis aleatórias com distribuição Bernoulli de parâmetros \\(p\\) e \\(q\\), respectivamente, a divergência de Kullback-Leibler é dada por \\[ D_{KL}(p||q) = p\\log\\left(\\frac p q\\right) + (1-p)\\log\\left(\\frac{1-p}{1-q}\\right) \\] É fácil ver que \\[ \\begin{aligned} D(\\mathbf y|{ \\boldsymbol \\beta}) &amp;= \\sum_{i=1}^n y_i\\log(y_i) + (1-y_i)\\log(1-y_i) - \\sum_{i=1}^n y_i\\log(\\mu_i) + (1-y_i)\\log(1-\\mu_i) \\\\ &amp;=\\sum_{i=1}^ny_i\\log\\left(\\frac{y_i}{\\mu_i}\\right) + (1-y_i)\\log\\left(\\frac{1-y_i}{1-\\mu_i}\\right) \\\\ &amp;= \\sum_{i=1}^n D_{KL}(y_i||\\mu_i) \\\\ &amp;= D_{KL}(\\mathbf y||{\\boldsymbol\\mu}). \\end{aligned} \\] Outra propriedade interessante é que o desvio identifica unicamente a verossimilhança do modelo. De fato, podemos reformular a definição do modelo linear generalizado a partir da especificação do desvio ou da divergência de Kullback-Leibler no lugar do componente aleatório. Essa propriedade será útil na comparação com redes neurais. Os estimadores de máxima verossimilhança de \\(\\boldsymbol \\beta\\) são os mesmos que minimizam a função desvio. Graças à concavidade da divergência de Kullback-Leibler, Isso pode ser feito igualando os componentes do gradiente do desvio a zero e isolando os valores de \\(\\boldsymbol \\beta\\): \\[ \\nabla_{\\boldsymbol \\beta} D(\\mathbf y|{ \\boldsymbol \\beta}) = \\mathbf 0 \\] Como não é possível realizar essa operação analiticamente, utilizamos métodos iterativos. Existem dois principais métodos iterativos concorrentes: a descida de gradiente e o método de Newton-Raphson. No paradigma de modelos lineares generalizados, o método de Newton-Raphson é mais comum pois i) ele utiliza a segunda derivada e converge mais rápido que o método da descida de gradiente, que utiliza somente a primeira e ii) é possível demonstrar que ele equivale à aplicação iterada de mínimos quadrados ponderados, o que facilita significativamente a implementação da solução. No paradigma de redes neurais, a descida de gradiente é mais comum por conta das vantagens , que veremos na próxima subseção. Em resumo, podemos concluir que Em seguida, veremos que a rede neural aparece quando utilizamos o componente sistemático e a função de ligação várias vezes. 2.1.3.2 Extensão para redes neurais Uma forma de estender o modelo linear generalizado é considerando que o resultado da função de ligação aplicada ao componente sistemático é uma nova covariável \\(z\\). Assim, temos \\[ \\begin{aligned} \\mathbf z &amp;= g^{-1}(\\mathbf X \\boldsymbol \\beta)\\\\ \\boldsymbol\\mu &amp;= g^{-1}(\\alpha_2\\mathbf 1 + \\beta_2 \\mathbf z) = g^{-1}([\\mathbf 1\\;\\mathbf z]\\boldsymbol\\beta_2), \\end{aligned} \\] em que \\(\\boldsymbol\\beta_2 = [\\alpha_2\\;\\beta_2]^{\\top}\\). Agora, podemos aumentar o número de covariáveis \\(\\mathbf z\\) para \\(k\\) covariáveis, de modo que \\[ \\begin{aligned} \\mathbf z_j &amp;= g^{-1}(\\mathbf X \\boldsymbol \\beta_1^j)\\\\ \\boldsymbol\\mu &amp;= g^{-1}(\\mathbf Z\\boldsymbol\\beta_2), \\end{aligned} \\] onde \\(\\mathbf Z = [\\mathbf 1\\;\\mathbf z_1\\;\\dots\\;\\mathbf z_k]\\). O modelo especificado dessa forma também é chamado de , ou MLP. Mesmo com essa mudança, função desvio permanece a mesma, já que construída a partir de \\(\\boldsymbol \\mu\\). A única diferença é que agora ela é uma função de \\(\\boldsymbol \\beta_1^j\\), \\(j=1,\\dots,k\\) e \\(\\beta_2\\). O ajuste do modelo é realizado da mesma forma: \\[ \\nabla_{\\{\\boldsymbol \\beta_1^1, \\dots,\\boldsymbol \\beta_1^k,\\boldsymbol \\beta_2\\}} D(\\mathbf y|{ \\boldsymbol \\beta_1^1, \\dots,\\boldsymbol \\beta_1^k,\\boldsymbol \\beta_2}) = \\mathbf 0 \\] A vantagem dessa extensão é que adicionamos não linearidade ao modelo. Isso nos permite modelar relações mais complexas entre as preditoras e a resposta, o que pode resultar em melhores predições. De fato, é possível demonstrar que uma rede neural com uma camada oculta pode estima qualquer função contínua entre \\(\\mathbf X\\) e \\(\\mathbf y\\). A desvantagem é que a estimação via Newton-Raphson é complicada de calcular. É nesse momento que aparecem as vantagens da descida de gradiente. Primeiro, defina \\(\\boldsymbol \\beta = \\{\\boldsymbol \\beta_1^1, \\dots,\\boldsymbol \\beta_1^k,\\boldsymbol \\beta_2\\}\\). Utilizando a regra da cadeia, a derivada parcial da função desvio em relação a \\(\\beta_{1,l}^{j}\\) é dado por \\[ \\frac{\\partial D(\\mathbf y|\\boldsymbol\\beta)}{\\partial \\beta_{1,l}^{j}} = \\sum_{i=1}^n\\frac{\\partial D(\\mathbf y|\\boldsymbol\\beta)}{\\partial z_{j,i}} \\frac{\\partial z_{j,i}}{\\partial \\beta_{1,l}^{j}} . \\] As derivadas em relação aos elementos de \\(\\boldsymbol \\beta_2\\) ocorrem diretamente, como na especificação em apenas um nível. Todas essas derivadas são fáceis de calcular e têm forma analítica definida. A aplicação da regra da cadeia de forma iterada nesse contexto é chamada de . 2.1.3.3 Sinônimos e generalizações A literatura de redes neurais costuma trocar o nome função de ligação por ativação. Isso ocorre por motivos históricos, já que as redes neurais foram inicialmente inspiradas na ativação de sinapses de neurônios. No contexto de redes neurais, o objetivo da função de ativação não é, necessariamente, modificar a faixa de variação do contradomínio, pois o resultado após a função pode ser uma nova covariável. Isso sugere a existência de certa liberdade na escolha de ativações. A única restrição é que a função de ativação deve ser não linear, pois, se fosse linear, a aplicação de várias camadas de funções resultaria numa única combinação linear. As ativações mais populares são aquelas que têm derivadas simples. Já a verossimilhança ou o desvio são substituídos por uma função de perda. A natureza probabilística do modelo é considerada indiretamente através da função desvio, como vimos anteriormente. No entanto, ao invés de trabalhar com o desvio, os pesquisadores de redes neurais definem genericamente uma função de perda que mensura uma discrepância entre os valores observados e estimados. Uma escolha razoável de função de perda é a própria divergência de Kullback-Leibler, calculada com base no suporte da variável resposta, gerando a função desvio. No entanto, dependendo da aplicação, podemos escolher outras perdas, que podem gerar distribuições de probabilidades sem formato analítico específico. Por último, a aplicação de camadas de não-linearidades podem ser representadas através de um grafo direcionado acíclico. Essa representação é vantajosa por dois motivos. O primeiro é que a aplicação facilita a especificação e entendimento do modelo e seus parâmetros, que podem ficar com notação carregada na especificação por fórmulas matemáticas. A segunda é que é possível utilizar conhecimentos de teoria dos grafos para aumentar a eficiência dos algoritmos. Por exemplo, é possível aproveitar parte dos cálculos do na obtenção das derivadas parciais da função de perda abadi2016tensorflow (XXX). Em resumo, podemos concluir que Existem diversas formas de definir, desenhar e apresentar os conceitos básicos de redes neurais e a descida de gradiente. As melhores são apresentadas em blogs, vídeos e aplicativos, onde as operações são apresentadas de forma interativa. O racional apresentado nesse texto buscou mostrar a relação intrínseca entre a regressão logística e as redes neurais. 2.1.3.4 A operação de convolução Convolução em imagens é uma operação usada nas áreas de e . Ela é utilizada para detectar padrões e aplicar filtros em imagens. Na prática, o que ela faz é calcular um novo valor para um pixel na posição \\((i,j)\\) de uma imagem com base nos valores dos pixels da vizinhança. Uma forma organizada de fazer essa soma ponderada é criando uma matriz de pesos. Com ela, não é necessário procurar os pontos da vizinhança. Para cada ponto \\((i,j)\\), obtemos a matriz de vizinhança, multiplicamos pontualmente pela matriz de pesos e somamos os valores resultantes. Chamaremos essa matriz de pesos de . Considere \\[ K = \\left[\\begin{array}{rrr}-1&amp;-1&amp;-1\\\\0&amp;0&amp;0\\\\1&amp;1&amp;1\\end{array}\\right] \\] e a seguinte imagem: IMAGEM Tome por exemplo o ponto \\((i,j) = (12,16)\\). A vizinhança 3x3 em torno desse ponto é dada por \\[ P_{i,j} = \\left[\\begin{array}{rrr} 0.98 &amp; 0.53 &amp; 0.79 \\\\ 0.97 &amp; 0.99 &amp; 1.00 \\\\ 0.98 &amp; 1.00 &amp; 1.00 \\end{array}\\right] \\] A operação de convolução é feita da seguinte forma: \\[ \\begin{aligned} (P_{12,16} *K )_{12,16} &amp;= k_{1,1}p_{11,15} + k_{1,2}p_{11,16} + k_{1,3}p_{11,17} + \\\\ &amp;+ k_{2,1}p_{12,15} + k_{2,2}p_{12,16} + k_{2,3}p_{12,17} + \\\\ &amp;+ k_{3,1}p_{13,15} + k_{3,2}p_{13,16} + k_{3,3}p_{13,17} \\end{aligned} \\] Esse é o valor a ser colocado no ponto \\((i,j)\\). Isso funciona em todos os pontos que não estão na borda da imagem. Existem duas formas de trabalhar com as bordas da imagem. A primeira é preenchendo as bordas com zeros, de forma a considerar apenas os pontos da imagem. A segunda é descartar os pontos da borda e retornar uma imagem menor, contendo somente os pixels em que foi possível aplicar todo o kernel. No nosso caso, o resultado da convolução fica como na Figura XXX. Essa matriz não foi escolhida por acaso. Ela serve para destacar padrões horizontais da imagem. Como a primeira linha é formada por \\(-1\\) e a última é formada por \\(1\\), a matriz fica com valor alto se a parte de cima do pixel for preta e a parte de baixo for branca (\\(\\text{grande} * 1 + \\text{pequeno} * (-1)\\)). A parte destacada da imagem acabou sendo os olhos (pois temos maior concentração de pixels pretos ali), além das extremidades superior e inferior do rosto. IMAGEM Aplicando o kernel vertical \\[ K = \\left[\\begin{array}{rrr}-1&amp;0&amp;1\\\\-1&amp;0&amp;1\\\\-1&amp;0&amp;1\\end{array}\\right], \\] a parte destacada do rosto são as extremidades dos lados: IMAGEM A aplicação de convoluções em CAPTCHAs é direta. Nesse caso, vamos adicionar uma constante numérica ao resuldado da convolução. Isso pode auxiliar na visualização, pois controlamos os valores que ficam dentro do intervalo \\([0,1]\\). Mais adiante veremos que esse será o intercepto da regressão. Vamos partir do CAPTCHA da RFB abaixo Esse é o resultado de adicionar o kernel vertical e bias de 0.6. Em seguida observamos o kernel horizontal. Note que identificamos padrões das linhas horizontais que tentam atrapalhar a visão das letras. 2.1.3.5 Redes neurais convolucionais Considere uma observação de uma imagem com 2x2 pixels abaixo. Note que se o interesse for utilizar essa matriz numa regressão logística, teríamos uma linha de nossa base de dados, com nove colunas. Ou seja, a regressão teria nove parâmetros associados. \\[ P = \\left[\\begin{array}{rrr} p_{11} &amp; p_{12} &amp; p_{13} \\\\ p_{21} &amp; p_{22} &amp; p_{23} \\\\ p_{31} &amp; p_{32} &amp; p_{33} \\end{array}\\right] \\] Considere agora o kernel \\(W\\), também 3x3: \\[ K = \\left[\\begin{array}{rrr} k_{11} &amp; k_{12} &amp; k_{13} \\\\ k_{21} &amp; k_{22} &amp; k_{23} \\\\ k_{31} &amp; k_{32} &amp; k_{33} \\end{array}\\right] \\] A operação convolução resulta numa nova matriz 3x3, em que cada elemento é uma combinação linear de elementos de \\(P\\) e \\(K\\). De fato, é possível mostrar que o resultado da convolução é o resultado de uma multiplicação de matrizes obtida através da de \\(K\\) gray2006toeplitz (XXX). Ou seja, nesse caso, estamos fazendo uma nova regressão logística, mas com os valores dos dados modificados. Se, ao invés disso, considerarmos a matriz 2x2, \\[ K = \\left[\\begin{array}{rr} k_{11} &amp; k_{12}\\\\ k_{21} &amp; k_{22} \\end{array}\\right] \\] estamos na prática reduzindo o problema de regressão logística para apenas quatro parâmetros. Também vamos introduzir uma função chamada . ReLu significa e é uma função que zera tudo o que é negativo e mantém tudo aquilo que é positivo inalterado. Ou seja, \\[ ReLu(x) = \\frac{x + |x|}{2} \\] ReLu não é útil para visualização da imagem, pois a substituição de valores negativos por zero já é feita automaticamente. No entanto, podemos aplicar várias convoluções iteradamente e separá-las por aplicações da função ReLu. Como a função ReLu é não linear, essa iteração gera resultados que não seriam possíveis de obter somente com aplicações da operação convolução. Na prática, o que queremos é treinar os valores do kernel aplicado, buscando obter imagens transformadas que aumentem o poder preditivo. Nesse sentido, a aplicação de convoluções, soma de constantes e ReLu são as operações que substituem a multiplicação de matrizes, adição de intercepto e aplicação da função de ligação na regressão logística, respectivamente. Ou seja, uma rede neural convolucional é apenas uma forma diferente de implementar os conceitos. O modelo força-bruta é uma adaptação do clássico modelo LeNet-5 lecun2015lenet (XXX). Esse modelo aplica convolução 3 vezes consecutivas, adicionando o viés e a função ReLu em cada nível. Após cada convolução, também aplicamos uma operação chamada , que reduz a resolução da imagem, tomando o valor máximo da vizinhança de cada ponto. Após a aplicação das convoluções, as imagens são remodeladas no formato retangular padrão (uma linha por imagem) e aplicamos duas camadas de redes neurais comuns, como vimos anteriormente. Após a realização de todas as operações, os números resultantes não estão entre zero e um. Por isso, aplicamos a ativação , que é a generalização da ativação logística, mas para uma resposta com vários resultados possíveis \\[ softmax(x_i) = \\frac{e^{x_i}}{\\sum_ie^{x_i}} \\] Em resumo, as operações que realizamos na rede neural convolucional são 2.1.3.6 Arquitetura de redes neurais 2.1.4 Ligando os conceitos A obtenção de uma função \\(g\\) capaz de mapear \\(\\mathbf y\\) a partir de uma nova imagem \\(\\mathbf X\\) depende de uma amostra de imagens \\(\\mathbf X_1, \\dots, \\mathbf X_S\\), corretamente classificadas através do vetor \\(\\mathbf y_1, \\dots, \\mathbf y_S\\). A tarefa é, portanto, obter uma estimativa \\(\\hat g\\) para a função \\(g\\) que minimiza \\[ L(\\hat g(\\mathbf X), \\mathbf y) = \\mathbb I(g(\\mathbf X) \\neq \\mathbf y) \\] em que \\(\\mathbb I(g(\\mathbf X) \\neq \\mathbf y)\\) indica se \\(g(\\mathbf X)\\) difere do que é observado em \\(\\mathbf y\\). Isto é, pretende-se encontrar uma função que minimize a taxa de classificação incorreta das imagens que descrevem os textos dos Captchas. 2.2 Dados Neste capítulo, descrevemos em detalhes como foi a obtenção dos dados para a realização da pesquisa. Como comentado anteriormente, a base foi construída do zero para os fins do projeto, sendo uma parte significativa dos esforços para obtenção dos achados. No total, foram construídas bases de dados de dez Captchas que estavam disponíveis publicamente no momento da realização da pesquisa. Os Captchas foram revisados pela última vez no dia 14/02/2022, para verificar se ainda estavam ativos. 2.2.1 Escolha dos captchas analisados Para selecionar os Captchas, adotamos alguns critérios objetivos. Os critérios foram: O site acessado é de um serviço público (governo federal, tribunais, etc). Trata-se de um Captcha contendo letras (A a Z) e números (0 a 9) em uma imagem com extensão jpeg ou png. O comprimento do Captcha é fixo, ou seja, dois Captchas da mesma origem devem ter sempre o mesmo comprimento. A primeira restrição para escolha dos Captchas é de ordem principiológica. Um serviço público não deveria restringir o acesso aos dados para robôs. Como já discutido anteriormente, nesses casos, a existência do Captcha não tem como finalidade dar maior segurança ao serviço prestado, mas sim limitar o acesso aos servidores por robôs. As restrições 2 e 3 foram escolhidas com o objetivo de facilitar as simulações para obtenção dos resultados. Em princípio, nada impede que os modelos desenvolvidos trabalhem com outros tipos de rótulos, desde que exista uma lista prévia de rótulos. Além disso, é possível realizar adaptações no pré-processamento base de dados para lidar com diferentes comprimentos de Captchas. A Tabela 2.1 mostra os Captchas trabalhados. A informação de limite de chutes é importante para a implementação do oráculo, detalhado a seguir. Tabela 2.1: Lista de captchas analisados. speed dist 4 2 4 10 7 4 7 22 8 16 9 10 O oráculo é o nome que escolhemos para a possibilidade de checar, de forma automática, se uma predição do modelo foi bem ou mal sucedida. Como um Captcha é um teste de Turing inverso, por definição ele é obrigado a mencionar se uma predição está correta: se a predição foi correta, a página de interesse é acessada; se a predição está incorreta, o site envia uma mensagem de erro. Para implementar um oráculo em uma linguagem de programação, é necessário seguir os seguintes passos: Acessar a página do site de interesse Preencher o formulário de pesquisa com a informação a ser consultada. Por exemplo, no site da RFB, a informação é o CNPJ da empresa a ser consultada. Em um site de tribunal, a informação é um número identificador de processo. Baixar o Captcha da busca. Aplicar o modelo no Captcha baixado (ou classificar a imagem manualmente) para obter a predição. Submeter a consulta no site, informando a predição. Verificar o resultado. Se acessou a página desejada, a predição está correta. Caso contrário, a predição está incorreta. Outra oportunidade que o oráculo permite em parte dos casos é a possibilidade de testar mais de uma predição. Sites com essa caracteística permitem que a pessoa ou robô teste mais de uma predição caso o Captcha tenha fracassado. Como é possível observar na Tabela 2.1, dos 10 Captchas trabalhados, 7 permitem a realização desses testes. Em teoria, a possibilidade de testar vários rótulos para o mesmo Captcha implica na possibilidade teórica de resolver um Captcha por força bruta. Bastaria testar todos os rótulos possíveis para acessar a página de interesse. Na prática, no entanto, essa estratégia não funciona, já que a quantidade de rótulos possíveis é muito grande para testar no site, seja por demorar muito tempo ou pelo site forçar a troca de Captcha após a passagem de determinado tempo ou quantidade de tentativas. Lista e caracterização dos captchas Além dos Captchas de sites, também consideramos imagens geradas artificialmente para rodar os modelos. O motivo de criar Captchas artificiais é a facilidade de rodar modelos e simulações, já que nos casos reais é necessário ter acesso à internet e também construir bases de dados de cada Captcha. Desenvolvemos duas alternativas para o Captcha gerado. O primeiro, chamado MNIST-Captcha, é simplesmente uma adaptação da conhecida base MNIST para ficar no formato de um Captcha. A partir da escolha do comprimento e dos caracteres que fazem parte da imagem, o gerador simplesmente faz uma amostra aleatória da base do MNIST e compõe as imagens horizontalmente. A Figura ?? mostra um exemplo do Captcha gerado a partir da base MNIST. No exemplo, o comprimento escolhido para o Captcha foi de 4 valores. O problema do MNIST-Captcha é que a base de dados original é finita. Apesar de possuir por volta de 60 mil observações e de um Captcha crescer em ordem exponencial, o MNIST-Captcha pode gerar Captchas repetidos. Além disso, é necessário tomar cuidado com as bases de treino e teste, já que os elementos de teste não poderiam fazer parte de nenhuma observação de treino. Por esse motivo, criamos um Captcha interamente gerado por programação, chamado R-Captcha. O Captcha é gerado utilizando a ferramenta ImageMagick, com a possibilidade de customizar diversos parâmetros, como Quais caracteres usar na imagem O comprimento do Captcha Dimensões da imagem Probabilidade de rotação da imagem Probabilidade de adicionar um risco entre as letras Probabilidade de adicionar uma borda nas letras Probabilidade de adicionar uma caixa (retângulo) em torno das letras Probabilidade de adicionar um ruído branco no fundo da imagem Probabilidade de adicionar efeitos de tinta óleo e implosão Por ser uma versão mais flexível e completa, optamos por trabalhar principalmente com o R-Captcha nas simulações. O MNIST-Captcha foi implementado mas não foi utilizado nas simulações. Repositório de dados Os Captchas foram classificados com o procedimento que chamamos de semi-automático, definido a seguir. No pacote {captchaDownload}, foram desenvolvidas ferramentas para baixar e organizar cada Captcha, utilizando o oráculo para garantir que as imagens eram corretamente classificadas. Cada Captcha teve as primeiras 100 observações classificadas manualmente. Isso foi feito a partir do próprio RStudio, utilizando a ferramenta de classificação manual do pacote {captcha}. A partir das classificações iniciais, um modelo foi ajustado com a quantidade de observações disponível. Esse passo também foi feito a partir do pacote {captcha}, que cria um projeto de classificação para um Captcha específico. O modelo, então, foi utilizado como uma ferramenta para otimizar a classificação manual, funcionando da seguinte forma. Primeiro, o modelo tenta realizar a predição automaticamente e o oráculo avisa se a predição está correta ou não. Se estiver incorreto, e o site aceitar várias tentativas, o modelo tenta novamente, mas com uma segunda alternativa de predição, definida por uma heurística, definida no Capítulo ??. Caso o site não aceite várias tentativas ou o modelo não consiga acertar o Captcha em \\(N\\) tentativas (que arbitramos como dez), a imagem do Captcha aparecerá para classificação manual. Com o procedimento destacado acima, é criada uma nova base de dados, que por sua vez é utilizada para ajustar um novo modelo. O modelo, atualizado, é utilizado para classificar novos Captchas, e assim por diante, até que o modelo ajustado alcance uma acurácia razoável, que arbitramos em 80%. Com isso, finalizamos o procedimento de classificação. O único problema do procedimento de classificação diz respeito aos Captchas que não aceitam várias tentativas. Nesses casos, não é possível verificar com certeza absoluta que um caso classificado manualmente (após a tentativa do modelo) foi classificado corretamente, já que a classificação manual seria a segunda tentativa. No entanto, esse problema aparece somente em três Captchas (cadesp, jucesp e trf5). A classificação manual dos 100 primeiros Captchas, no entanto, mostrou que pelo menos 95% dos Captchas foram classificados corretamente quando classificados manualmente. Supomos que a proporção máxima de 5% de erro é negligenciável considerando que a maior parte das bases de dados foi construída com verificação do oráculo. Para este trabalho, desenvolvemos uma técnica inovadora para resolver Captchas sem a necessidade de feedback humano. A solução envolve avanços em duas direções: engenharia e modelagem. 2.2.2 Construção dos dados Na parte de engenharia, desenvolvemos uma técnica para capturar e anotar feedbacks automatizados do oráculo no preenchimento de Captchas. A técnica consiste em três passos: Desenvolver um robô que acessa o site desejado e tenta acessar uma informação que exige preenchimento de Captcha. A partir de um modelo estatístico inicial, o robô tenta preencher o Captcha automaticamente, submetendo para avaliação do site. Se o Captcha for verificado pelo site como correto, anotamos o caminho da imagem com o valor “1”. Se estiver incorreto, anotamos o caminho da imagem com o valor “0”. O procedimento descrito pode ser reproduzindo indefinidamente. Isso significa que podemos criar uma base de dados virtualmente infinita de Captchas rotulados, com a informação adicional do rótulo estar correto ou incorreto. Fizemos isso para todos os Captchas presentes em nossa base de dados. O problema do uso de oráculos é que a informação adicional recebida quando o modelo erra é incompleta. A única informação nova que temos é que o rótulo testado está incorreto, dentre todos os rótulos possíveis daquela imagem. Como temos uma grande quantidade de rótulos possíveis em um Captcha, muitas vezes na ordem de milhões, o feedback do oráculo pode ser considerado fraco. Uma possível abordagem para lidar com o segundo problema seria simplesmente descartar os Captchas classificados incorretamente. Podemos criar uma base de dados (virtualmente infinita) somente com os rótulos corretos e ajustar um novo modelo. Essa abordagem, no entanto, tem sérios problemas, já que considera somente os casos em que o classificador já funciona bem. Nosso objetivo é melhorar o modelo justamente nos casos em que o oráculo acusa erros. 2.2.3 Análise descritiva Os resultados empíricos foram divididos em dois testes. Primeiro, separamos uma amostra rotulada para verificar o quanto a heurística recuperava os valores corretos, a partir da predição de um modelo inicial. Depois, verificamos o ganho efetivo na acurácia do modelo alimentado com a base de dados aumentada, descrita na Seção 2.3. Para o primeiro teste, adotamos o seguinte procedimento. Para cada Captcha, selecionamos bases de treino iniciais que resultaram em acurácias de 40%, 60% e 80% após o ajuste do modelo de redes neurais convolucionais. Em seguida, aplicamos a heurística nos casos da base de teste em que o modelo errou. Finalmente, calculamos o percentual de recuperação dos resultados pela heurística. A parte do ajuste do modelo de redes neurais convolucionais merece alguns comentários adicionais. Por um lado, é importante que o modelo esteja bem ajustado, para que o erro do modelo seja fruto somente da quantidade de observações e não um problema de sub ajuste. Por outro lado, cada tamanho de base pode estar ligada a diferentes hiperparâmetros, e não existe uma forma de garantir que os melhores hiperparâmetros foram selecionados. (goodfellow2014?) menciona que, para realizar comparações de modelos, as técnicas de regularização, especialmente aumentação de dados, devem ser padronizadas. Por isso, optamos por manter a mesma grade de hiperparâmetros em todos os modelos. Especificamente, consideramos na grade as quantidades: Multiplicador da quantidade de filtros convolucionais. Quantidade de filtros na primeira camada densa. Dropout. Para diferentes modelos, como AC-GAN, o procedimento seria o mesmo. Bastaria fixar os hiperparâmetros e rodar todos os modelos. A Tabela ?? mostra os resultados da análise. É possível verificar que a heurística X apresenta os melhores resultados, independentemente do Captcha ou da capacidade do modelo inicial. A Figura ?? mostra os mesmos resultados de forma visual e resumida. É possível notar que a proporção de casos recuperados não aumenta linearmente Em seguida, passamos para a segunda etapa do procedimento. Nesta etapa, adicionamos a base construída pelo oráculo e modificada pela heurística à base de treino inicial. Como base de teste, utilizamos um conjunto de dados novo, que não foi utilizado em nenhum procedimento anterior, para garantir que não há contaminação. 2.3 Simulações Para verificar o poder do uso do oráculo para o aprendizado do modelo, recorremos a uma série de simulações. As simulações foram organizadas em três passos: modelo inicial, dados e modelo final. Os passos foram descritos em maior detalhe a seguir. 2.3.1 Primeiro passo: modelo inicial A simulação do modelo inicial teve como objetivo obter modelos preditivos de Captchas com acurácias distintas. O modelo inicial seria usado, então, para baixar dados diretamente do site usando o oráculo e, por fim, ajustar um modelo final com os novos dados provenientes do oráculo. Construímos os modelos iniciais em dois passos. O primeiro foi montar a base de dados completa, suficiente para ajustar um modelo com alta acurácia, que arbitramos em 80%, como descrito anteriormente. Depois, montamos 10 amostras de dados com subconjuntos das bases completas, cada uma contendo 10%, 20%, e assim por diante, até a base completa. Por exemplo: no Captcha da Jucesp, obtivemos um modelo com acurácia maior que 80% com 4000 Captchas. Fizemos então uma partição dos dados com 400 imagens (10% do total), 800 imagens (20% do total) e assim por diante, até o modelo com 4000 Captchas. Para cada tamanho de amostra \\(A\\), rodamos uma bateria de 27 modelos. Fizemos isso porque para diferentes quantidades de amostra, a configuração dos hiperparâmetros que resulta no melhor modelo pode ser diferente. Fizemos uma grade de hiperparâmetros considerando três informações: A quantidade de unidades computacionais na primeira camada densa após as camadas convolucionais: consideramos os valores de 100, 200 e 300. O valor do dropout aplicado às camadas densas: consideramos os valores de 10%, 30% e 50%. O fator de decaimento na taxa de aprendizado a cada época: consideramos os valores de 1%, 2% e 3%. Combinando os três valores dos três hiperparâmetros, temos um total de \\(27=3^3\\) hiperparâmetros. Com isso, foi possível identificar, para cada tamanho de amostra \\(A\\), o classificador \\(C_A\\) com a melhor acurácia dentre os modelos ajustados. No final do primeiro passo, portanto, consideramos apenas o melhor modelo para cada tamanho de amostra. É claro que os modelos encontrados por essa técnica não são, necessariamente, os melhor modelo possíveis. No entanto, como a técnica é a mesma para todos os Captchas, ganhamos a possibilidade de fazer comparações e temos uma metodologia mais transparente. 2.3.2 Segundo passo: dados O segundo passo teve como objetivo construir as bases de dados utilizando o oráculo. Primeiro, foi necessário decidir quais modelos, dentre os 10 ajustados para cada Captcha, seriam utilizados para construir novas bases. Não faria sentido, por exemplo, considerar um modelo com acurácia de 0%, já que ele não produziria nenhuma observação comparado com um modelo que chuta aleatoriamente. Também não faria sentido considerar um classificador com acurácia de 100%, já que nesse caso não há o que testar com a técnica do oráculo. Decidimos que seria necessário considerar somente os modelos que resultaram em acurácias maiores de 1% e menores de 50%. O valor máximo foi decidido após realizar alguns testes empíricos e verificar, informalmente, que a técnica do oráculo realmente resultava em ganhos expressivos, mesmo com modelos de baixa acurácia. Concluímos então que não seria necessário testar a eficácia da técnica para classificadores com alta acurácia. Já o valor mínimo foi decidido de forma arbitrária, retirando-se os classificadores com acurácia muito baixa. A segunda decisão a ser tomada para construção dos dados foi a quantidade de imagens que seria baixada para cada Captcha. Como temos Captchas de diferentes dificuldades, a quantidade de dados seria diferente. Optamos por baixar a quantidade de dados de forma a montar uma base de treino que contém a quantidade de observações igual ao melhor modelo daquele Captcha. Por exemplo, no TJRS, um modelo com acurácia próxima de 100% foi identificado com 2000 observações. O melhor modelo com 300 imagens (240 para treino, 60 para teste) resultou em uma acurácia de 35%. Foram, então, baixadas 1760 observações para compor o total de 2000 na base de treino. As imagens de teste do modelo inicial poderiam até ser utilizadas, mas optamos por descartar para garantir que o modelo não ficasse sobreajustado para a primeira base. O motivo de baixar a mesma quantidade de observações que o melhor modelo inicial foi feita por dois motivos. O primeiro é que temos evidências de que é possível construir um bom modelo com essa quantidade de imagens, ainda que em um caso tenhamos informações completas, e no outro incompletas. O segundo é que isso nos permite comparar o resultado do modelo completamente anotado contra o modelo que é parcialmente anotado e com anotações incompletas provenientes do oráculo. A terceira e última decisão tomada para baixar os dados foi a quantidade de chutes que o modelo poderia fazer, nos casos em que isso é permitido pelo site. Optamos, de forma arbitrária, por três valores: 1, que é equivalente a um site que não permite múltiplos chutes, 5 chutes e 10 chutes. Portanto, o procedimento de coleta dos dados foi feito, para cada Captcha, da seguinte forma: Listamos todos os melhores modelos ajustados para cada tamanho de amostra. Filtramos os modelos para os que apresentavam acurácia de 5% até 50% Definimos o tamanho da base a ser obtida, com base no tamanho da base de treino utilizada no modelo e a quantidade total que se objetivou obter. Para cada quantidade de tentativas disponível (1, 5 e 10), baixamos as imagens, classificando com o valor “1” se o Captcha fosse classificado corretamente em alguma das tentativas, e com o valor “0” caso contrário. Nos casos com erros, armazenamos um arquivo de log para cada Captcha com o histórico de tentativas incorretas, que é a informação mais importante a ser passada do modelo final. No final, obtivemos bases de dados de treino para todos os Captchas analisados, com quantidades de imagens variadas de acordo com os parâmetros definidos anteriormente, variando também pela quantidade de tentativas. A quantidade total de bases de dados geradas foi 65. Além das bases de treino, construímos, para cada Captcha, uma base de teste. As bases de teste foram construídas completamente do zero, sem utilizar informações de bases anteriores. Para construir as bases, utilizamos a mesma técnica semi-automática definida anteriormente, usando o melhor modelo disponível para classificar a maioria das imagens e classificando manualmente em caso de falha. Em alguns casos, como TJMG e TJRS, a classificação humana quase não foi necessária, pois os classificadores obtidos apresentaram acurácia próxima de 100%. Como o único objetivo da base de teste foi o de estimar a acurácia dos modelos finais, a quantidade de observações poderia ser arbitrada. O tamanho das bases de teste foi, então, arbitrado em 1000 imagens para todos os Captchas. 2.3.3 Terceiro passo: modelo final O modelo final foi ajustado para cada uma das 65 bases de treino disponíveis após a realização dos passos 1 e 2. Nesse caso, utilizamos o modelo proposto, que considera os erros na verossimilhança do modelo. Caso a imagem tenha sido corretamente classificada, a função de perda é calculada normalmente. Caso ela tenha sido classificada incorretamente, consideramos na verossimilhança a probabilidade de não observar nenhum dos chutes. Exemplo. Considere um Captcha com letras e números como vocabulário e comprimento de 4 valores. Uma imagem apresenta o rótulo (correto) “zab2”. O classificador do passo inicial tentou as seguintes configurações: “zab5”, “sab2”, “sab5”, “zob2”, “zob5”, todas erradas. A probabilidade considerada na verossimilhança para essa imagem é, portanto: \\[ P = 1 - p(\\text{zab5})- p(\\text{sab2})- p(\\text{sab5})- p(\\text{zob2})- p(\\text{zob5}) \\] Além de modificar a forma de calcular a função de perda do modelo, foi necessário testar os hiperparâmetros. Optamos por utilizar os mesmos hiperparâmetros dos modelos iniciais para manter a consistência. O único detalhe nesse ponto é que, como partimos dos parâmetros do modelo inicial, optamos por não modificar a quantidade de unidades na camada densa, variando somente os valores de dropout e de decaimento na taxa de aprendizado. Portanto, ajustamos 9 e não 27 modelos para cada base de dados. No final, assim como no primeiro passo, selecionamos classificador com melhor acurácia para cada modelo. Ficamos, então, com 65 modelos no final para comparar com os modelos iniciais e estimar a efetividade do oráculo. As comparações foram feitas através de gráficos de barras, explorando o efeito do uso do oráculo para diferentes Captchas, diferentes modelos iniciais e diferentes quantidades de chutes, além de um gráfico de dispersão para relacionar as acurácias iniciais e finais. Além do terceiro passo, fizemos alguns experimentos para verificar se, ao aplicar a técnica do oráculo iterativamente, poderíamos obter melhores resultados. Ou seja, podemos considerar os modelos obtidos no passo 3 como os modelos iniciais do passo 1, aplicar novamente o passo 2 (baixar dados) e o passo 3 (rodar modelo com os novos dados). Isso foi feito para apenas um conjunto selecionado de Captchas para verificar essa possibilidade, não fazendo parte das simulações principais deste estudo. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
